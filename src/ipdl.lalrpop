// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at http://mozilla.org/MPL/2.0/.

use ast::{Compress, CxxTypeKind, Direction, IncludeType, MessageDecl,
          MessageModifier, Namespace, Nesting, Param, Priority,
          Protocol, QualifiedId, SendSemantics, StructField,
          StructOrUnion, TranslationUnit, TypeSpec, UsingStmt};

use parser_state::{TopLevelDecl, ParserState, PreambleStmt};

grammar(parser_state: &ParserState);

//-----------------------------------------------------------------------------

ID: String = <s:r"[a-zA-Z_][a-zA-Z0-9_]*"> => String::from(s);

STRING: String = <s:r#""[^"\n]*""#> => String::from(s);


//-----------------------------------------------------------------------------

pub TranslationUnit: TranslationUnit = {
    <ps:Preamble> <ns:NamespaceThing+> => {
        let mut cxx_includes = Vec::new();
        let mut includes = Vec::new();
        let mut using = Vec::new();
        for p in ps {
            match p {
                PreambleStmt::CxxInclude(f) => cxx_includes.push(f),
                PreambleStmt::Include(it, f) => includes.push((it, f)),
                PreambleStmt::Using(u) => using.push(u),
            }
        }

        let mut protocol = None;
        let mut structs_and_unions = Vec::new();

        for nts in ns {
            for (ns, d) in nts {
                match d {
                    TopLevelDecl::Struct(s) => {
                        structs_and_unions.push((ns, StructOrUnion::Struct(s)));
                    },
                    TopLevelDecl::Union(u) => {
                        structs_and_unions.push((ns, StructOrUnion::Union(u)));
                    },
                    TopLevelDecl::Protocol(p) => {
                        // XXX Throw a proper parsing error.
                        if protocol.is_some() {
                            panic!("Only one protocol definition per file.");
                        }
                        protocol = Some((ns, p));
                    },
                }
            }
        }

        TranslationUnit {
            cxx_includes: cxx_includes,
            includes: includes,
            using: using,
            structs_and_unions: structs_and_unions,
            protocol: protocol
        }
    }
};


//--------------------
// Preamble
Preamble: Vec<PreambleStmt> = {
    (PreambleStmt ";")* => {
        let mut v = Vec::new();
        for (p, _) in <> {
            v.push(p);
        }
        v
    }
};

PreambleStmt = { CxxIncludeStmt, IncludeStmt, UsingStmt };

CxxIncludeStmt: PreambleStmt = {
  "include" <file:STRING> => PreambleStmt::CxxInclude(file),
};

IncludeStmt: PreambleStmt = {
    "include" <p:"protocol"?> <id:ID> => {
        /* resolveIncludePath etc. */
        let it = if p.is_some() { IncludeType::Protocol } else { IncludeType::Header};
        PreambleStmt::Include(it, id)
    }
};

UsingStmt: PreambleStmt = {
    "using" <t:CxxType> "from" <h:STRING> => PreambleStmt::Using(UsingStmt { cxx_type: t, header: h, kind: None }),
    "using" <k:CxxTypeKind> <t:CxxType> "from" <h:STRING> => PreambleStmt::Using(UsingStmt { cxx_type: t,
                                                                                             header: h,
                                                                                             kind: Some(k) }),
};

CxxTypeKind: CxxTypeKind = {
    "class" => CxxTypeKind::Class,
    "struct" => CxxTypeKind::Struct
};


//--------------------
// Namespaced stuff

NamespaceThing: Vec<(Namespace, TopLevelDecl)> = {
    "namespace" <name:ID> "{" <many_things:NamespaceThing+> "}" => {
        let mut things = Vec::new();
        for old_things in many_things {
            for (mut ns, node) in old_things {
                ns.add_outer_namespace(&name);
                things.push((ns, node))
            }
        }
        things
    },
    <s:StructDecl> => vec![(s.0, TopLevelDecl::Struct(s.1))],
    <u:UnionDecl> => vec![(u.0, TopLevelDecl::Union(u.1))],
    <p:ProtocolDefn> => vec![(p.0, TopLevelDecl::Protocol(p.1))],
};

StructDecl: (Namespace, Vec<StructField>) = {
    "struct" <name:ID> "{" <raw_fields: (StructField ";")* > "}" ";" => {
        let mut fields = Vec::new();
        for (f, _) in raw_fields {
            fields.push(f);
        }
        (Namespace::new(name), fields)
    }
};

StructField: StructField = {
    <t:Type> <field_name:ID> => StructField::new(t, field_name)
};

UnionDecl: (Namespace, Vec<TypeSpec>) = {
    "union" <name:ID> "{" <raw_components: (Type ";")+ > "}" ";" => {
        let mut components = Vec::new();
        for (c, _) in raw_components {
            components.push(c);
        }
        (Namespace::new(name), components)
    }
};

ProtocolDefn: (Namespace, Protocol) = {
    <q:ProtocolSendSemanticsQual?> "protocol" <name:ID> "{"
        <managers:ManagersStmtOpt> <manages:ManagesStmt?> <decls:MessageDeclThing*> "}" ";" =>
    {
        // XXX If we're currently parsing a header, produce an error.
        let (nesting, send_semantics) = q.unwrap_or((Nesting::None, SendSemantics::Async));
        (Namespace::new(name), Protocol::new(send_semantics, nesting, managers, manages, decls))
    },
};


//--------------------
// manager/manages stmts

ManagersStmtOpt: Vec<String> = {
    "manager" <l:ManagerList> ";" => l,
    => Vec::new(),
};

ManagerList: Vec<String> = {
    <name:ID> => vec![name],
    <l:ManagerList> "or" <name:ID> => {
        let mut l = l;
        l.push(name);
        l
    }
};

ManagesStmt: String = {
    "manages" <name:ID> ";" => name,
};


//--------------------
// Message decls

MessageDeclThing : MessageDecl = {
    MessageDirectionLabel ":" <m:MessageDecl> ";" => m,
    <m:MessageDecl> ";" => m,
};

MessageDirectionLabel : () = {
    "parent" => parser_state.direction.set(Some(Direction::In)),
    "child" => parser_state.direction.set(Some(Direction::Out)),
    "both" => parser_state.direction.set(Some(Direction::InOut)),
};

MessageDecl: MessageDecl = {
    <qual:SendSemanticsQual> <msg:MessageBody> => {
        let mut msg = msg;
        msg.nesting = qual.0;
        msg.prio = qual.1;
        msg.send_semantics = qual.2;

        // XXX Why isn't direction set in MessageBody? Then it might
        // not need to be an Option.
        if parser_state.direction.get().is_none() {
            // XXX Surely there's a better way to do this.
            panic!("Missing message direction.");
        }
        msg.direction = parser_state.direction.get().clone();

        msg
    },
};

MessageBody: MessageDecl = {
    <name:MessageId> "(" <in_params:ParamList> ")" <out_params:MessageOutParams> <modifiers:MessageModifier*> => {
        let mut decl = MessageDecl::new(name);
        decl.add_in_params(in_params);
        decl.add_out_params(out_params);
        decl.add_modifiers(modifiers);
        decl
    },
};

MessageId: String = {
    <id:ID> => id,
    // I think the Python IPDL parser produces an error here if the id
    // here is "delete".
    "__delete__" => String::from("__delete__"),
    // The Python IPDL parser has a case for "~" ID, but it just
    // produces an obsolescence error. The error message dates back to
    // at least 2010, so I don't think it is needed any more.
};

MessageOutParams: Vec<Param> = {
    "returns" "(" <l:ParamList> ")" => l,
    => Vec::new(),
};

MessageModifier: MessageModifier = {
    "verify" => MessageModifier::Verify,
    "compress" => MessageModifier::Compress(Compress::Enabled),
    "compressall" => MessageModifier::Compress(Compress::All),
};


//--------------------
// Minor stuff

Nesting: Nesting = {
    "not" => Nesting::None,
    "inside_sync" => Nesting::InsideSync,
    "inside_cpow" => Nesting::InsideCpow,
};

Priority: Priority = {
    "normal" => Priority::Normal,
    "high" => Priority::High,
};

SendQualifier: (Option<Nesting>, Option<Priority>) = {
    "nested" "(" <n:Nesting> ")" => (Some(n), None),
    "prio" "(" <p:Priority> ")" => (None, Some(p)),
};

SendQualifierList: (Option<Nesting>, Option<Priority>) = {
    <q:SendQualifier> <l:SendQualifierList> => (l.0.or(q.0), l.1.or(q.1)),
    => (None, None)
};

SendSemanticsQual: (Nesting, Priority, SendSemantics) = {
    <l:SendQualifierList> "async" =>
        (l.0.unwrap_or(Nesting::None),
         l.1.unwrap_or(Priority::Normal),
         SendSemantics::Async),
    <l:SendQualifierList> "sync" =>
        (l.0.unwrap_or(Nesting::None),
         l.1.unwrap_or(Priority::Normal),
         SendSemantics::Sync),
    "intr" => (Nesting::None, Priority::Normal, SendSemantics::Intr)
};

ProtocolSendSemanticsQual: (Nesting, SendSemantics) = {
    "async" => (Nesting::None, SendSemantics::Async),
    "sync" => (Nesting::None, SendSemantics::Sync),
    "nested" "(" "upto" <n:Nesting> ")" "async" => (n, SendSemantics::Async),
    "nested" "(" "upto" <n:Nesting> ")" "sync" => (n, SendSemantics::Async),
    "intr" => (Nesting::None, SendSemantics::Intr),
};

ParamList: Vec<Param> = {
    <l:ParamList> "," <p:Param> => {
        let mut l = l;
        l.push(p);
        l
    },
    <p:Param> => vec![p],
    => Vec::new()
};

Param: Param = {
    <t:Type> <name:ID> => Param::new(t, name)
};

Type: TypeSpec = {
    // only actor types are nullable; we check this in the type checker
    <is_nullable: "nullable"?> <t:BasicType> => t.set_nullable(is_nullable.is_some())
};

// ID == CxxType; we forbid qnames here,
// in favor of the |using| declaration
BasicType: TypeSpec = {
    <id:CxxID> <is_array: ("[" "]")?> => {
        TypeSpec::new(QualifiedId::new(id)).set_array(is_array.is_some())
    },
};


//--------------------
// C++ stuff

CxxType: TypeSpec = {
    <id:QualifiedID> => TypeSpec::new(id),
    <id:CxxID> => TypeSpec::new(QualifiedId::new(id)),
};

QualifiedID: QualifiedId = {
    <qual_id:QualifiedID> "::" <id:CxxID> => qual_id.qualify(id),
    <id1:CxxID> "::" <id2:CxxID> => QualifiedId::new(id1).qualify(id2),
};

CxxID: String = {
    ID,
    CxxTemplateInst,
};

CxxTemplateInst: String = {
    <t_name:ID> "<" <arg:ID> ">" => t_name + "<" + &arg + ">"
};
