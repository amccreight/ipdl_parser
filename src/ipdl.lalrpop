use ast::{CxxTypeKind, IncludeType, Node, Namespace, QualifiedId, StructField, TypeSpec};

grammar;

//-----------------------------------------------------------------------------

ID: String = <s:r"[a-zA-Z_][a-zA-Z0-9_]*"> => String::from(s);

STRING: String = <s:r#""[^"\n]*""#> => String::from(s);


//--------------------
// Preamble
pub Preamble = { (PreambleStmt ";")* };

pub PreambleStmt = { CxxIncludeStmt, IncludeStmt, UsingStmt };

pub CxxIncludeStmt: Node = {
  "include" <file:STRING> => Node::CxxInclude(file),
};

pub IncludeStmt: Node = {
    "include" "protocol" <id:ID> => Node::Include(IncludeType::Protocol, id) /* resolveIncludePath etc. */,
    "include" <id:ID> => Node::Include(IncludeType::Header, id),
};

pub UsingStmt: Node = {
    "using" <t:CxxType> "from" <h:STRING> => Node::Using { cxx_type: t, header: h, kind: None },
    "using" "class" <t:CxxType> "from" <h:STRING> => Node::Using { cxx_type: t, header: h, kind: Some(CxxTypeKind::Class) },
    "using" "struct" <t:CxxType> "from" <h:STRING> => Node::Using { cxx_type: t, header: h, kind: Some(CxxTypeKind::Struct) },
};


//--------------------
// Namespaced stuff


// NamespacedStuff

NamespaceThing: Vec<Node> = {
    // XXX "namespace" <name:ID> "{" <stuff:NamespacedStuff> "}" => Add outer namespace
    <s:StructDecl> => {
        let mut v = Vec::new();
        v.push(s);
        v
    },
    <u:UnionDecl> => {
        let mut v = Vec::new();
        v.push(u);
        v
    },
    // XXX <p:ProtocolDefn> => ...
};

StructDecl: Node = {
    "struct" <name:ID> "{" <raw_fields: (StructField ";")* > => {
        let mut fields = Vec::new();
        for (f, _) in raw_fields {
            fields.push(f);
        }
        Node::StructDecl { namespace: Namespace::new(name), fields: fields }
    }
};

StructField: StructField = {
    <t:Type> <field_name:ID> => StructField::new(t, field_name)
};

UnionDecl: Node = {
    "union" <name:ID> "{" <raw_components: (Type ";")+ > => {
        let mut components = Vec::new();
        for (c, _) in raw_components {
            components.push(c);
        }
        Node::UnionDecl { namespace: Namespace::new(name), components: components }
    }
};

// ProtocolDefn

// ProtocolBody


//--------------------
// State machine

State = { ID };


//--------------------
// Minor stuff

Type: TypeSpec = {
    // only actor types are nullable; we check this in the type checker
    <is_nullable: "nullable"?> <t:BasicType> => t.set_nullable(is_nullable.is_some())
};

BasicType: TypeSpec = {
    ScalarType,
    <t:ScalarType> "[" "]" => t.set_array(true)
};

ScalarType: TypeSpec = {
    ActorType,
    <id:CxxID> => {
        // ID == CxxType; we forbid qnames here,
        // in favor of the |using| declaration
        TypeSpec::new(QualifiedId::new(id))
    }
};

ActorType: TypeSpec = {
    <id:ID> ":" <st:State> => TypeSpec::new(QualifiedId::new(id)).add_state(st)
};


//--------------------
// C++ stuff

CxxType: TypeSpec = {
    <id:QualifiedID> => TypeSpec::new(id),
    <id:CxxID> => TypeSpec::new(QualifiedId::new(id)),
};

QualifiedID: QualifiedId = {
    <qual_id:QualifiedID> "::" <id:CxxID> => qual_id.qualify(id),
    <id1:CxxID> "::" <id2:CxxID> => QualifiedId::new(id1).qualify(id2),
};

CxxID: String = {
    ID,
    CxxTemplateInst,
};

CxxTemplateInst: String = {
    <t_name:ID> "<" <arg:ID> ">" => t_name + "<" + &arg + ">"
};
