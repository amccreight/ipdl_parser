use ast::{CxxTypeKind, IncludeType, Node, QualifiedId, TypeSpec};

grammar;

//-----------------------------------------------------------------------------

ID: String = <s:r"[a-zA-Z_][a-zA-Z0-9_]*"> => String::from(s);

STRING: String = <s:r#""[^"\n]*""#> => String::from(s);


//--------------------
// Preamble
pub Preamble = { (PreambleStmt ";")* };

pub PreambleStmt = { CxxIncludeStmt, IncludeStmt, UsingStmt };

pub CxxIncludeStmt: Node = {
  "include" <file:STRING> => Node::CxxInclude(file),
};

pub IncludeStmt: Node = {
    "include" "protocol" <id:ID> => Node::Include(IncludeType::Protocol, id) /* resolveIncludePath etc. */,
    "include" <id:ID> => Node::Include(IncludeType::Header, id),
};

pub UsingStmt: Node = {
    "using" <t:CxxType> "from" <h:STRING> => Node::Using { cxx_type: t, header: h, kind: None },
    "using" "class" <t:CxxType> "from" <h:STRING> => Node::Using { cxx_type: t, header: h, kind: Some(CxxTypeKind::Class) },
    "using" "struct" <t:CxxType> "from" <h:STRING> => Node::Using { cxx_type: t, header: h, kind: Some(CxxTypeKind::Struct) },
};


//--------------------
// Namespaced stuff


// NamespacedStuff

// NamespaceThing

// StructDecl

// StructFields

// StructField

// UnionDecl

// ComponentTypes

// ProtocolDefn

// ProtocolBody

//--------------------
// State machine

State = { ID };


//--------------------
// Minor stuff

// Type
// BasicType
// ScalarType

ActorType: TypeSpec = {
    <id:ID> ":" <st:State> => TypeSpec::new(QualifiedId::new(id)).add_state(st)
};

//--------------------
// C++ stuff

CxxType: TypeSpec = {
    <id:QualifiedID> => TypeSpec::new(id),
    <id:CxxID> => TypeSpec::new(QualifiedId::new(id)),
};

QualifiedID: QualifiedId = {
    <qual_id:QualifiedID> "::" <id:CxxID> => qual_id.qualify(id),
    <id1:CxxID> "::" <id2:CxxID> => QualifiedId::new(id1).qualify(id2),
};

CxxID: String = {
    ID,
    CxxTemplateInst,
};

CxxTemplateInst: String = {
    <t_name:ID> "<" <arg:ID> ">" => t_name + "<" + &arg + ">"
};
